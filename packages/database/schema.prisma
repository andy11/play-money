generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi", "fullTextIndex"]
}

generator zod {
  provider          = "zod-prisma-types"
  relationModel     = "default"
  output            = "./zod"
  useMultipleFiles  = true
  createInputTypes  = false
  createOutputTypes = false
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id               String             @id @default(cuid())
  username         String             @unique
  displayName      String
  avatarUrl        String?
  twitterHandle    String?
  discordHandle    String?
  website          String?
  bio              String?
  authAccounts     AuthAccount[]
  sessions         Session[]
  comments         Comment[]
  commentReactions CommentReaction[]
  resolvedMarkets  MarketResolution[]
  markets          Market[]           @relation()
  accounts         Account[]          @relation()
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  email         String    @unique /// @zod.custom.omit([model, input])
  emailVerified DateTime? /// @zod.custom.omit([model, input])

  // Unnecessary reverse relations
  recipientNotifications Notification[]      @relation("NotificationRecipient")
  actorNotifications     Notification[]      @relation("NotificationActor")
  notificationGroups     NotificationGroup[] @relation()
}

model AuthAccount {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Market {
  id               String            @id @default(cuid())
  question         String /// @zod.string.min(1, { message: "Question is required" })
  description      String
  slug             String /// @zod.string.min(1, { message: "Slug is required" })
  closeDate        DateTime?
  resolvedAt       DateTime?
  transactions     Transaction[]
  createdBy        String
  user             User              @relation(fields: [createdBy], references: [id])
  accounts         Account[]         @relation()
  options          MarketOption[]    @relation()
  marketResolution MarketResolution?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Unnecessary reverse relations
  notifications Notification[] @relation()
}

model MarketResolution {
  id             String       @id @default(cuid())
  marketId       String       @unique
  market         Market       @relation(fields: [marketId], references: [id], onDelete: Cascade)
  resolvedById   String
  resolvedBy     User         @relation(fields: [resolvedById], references: [id], onDelete: Cascade)
  resolutionId   String
  resolution     MarketOption @relation(fields: [resolutionId], references: [id], onDelete: Cascade)
  supportingLink String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Unnecessary reverse relations
  notifications Notification[] @relation()
}

model MarketOption {
  id                   String             @id @default(cuid())
  name                 String
  marketId             String
  market               Market             @relation(fields: [marketId], references: [id])
  currencyCode         CurrencyCode
  currency             Currency           @relation(fields: [currencyCode], references: [code])
  color                String             @default("#FF00FF") /// @zod.string.regex(/^#[0-9A-Fa-f]{6}$/)
  liquidityProbability Decimal            @default(0.5)
  resolutions          MarketResolution[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  // Unnecessary reverse relations
  notifications Notification[] @relation()
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum CommentEntityType {
  MARKET
}

model Comment {
  id         String            @id @default(cuid())
  content    String /// @zod.string.min(1).max(5000)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime?         @updatedAt
  edited     Boolean           @default(false)
  author     User              @relation(fields: [authorId], references: [id])
  authorId   String
  parentId   String?
  parent     Comment?          @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[]         @relation("CommentReplies")
  reactions  CommentReaction[]
  hidden     Boolean           @default(false)
  entityType CommentEntityType
  entityId   String

  // Unnecessary reverse relations
  notifications       Notification[] @relation("NotificationComment")
  notificationParents Notification[] @relation("NotificationParentComment")
}

model CommentReaction {
  id        String  @id @default(cuid())
  emoji     String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  // Unnecessary reverse relations
  notifications Notification[] @relation()
}

enum CurrencyCode {
  PRIMARY
  YES
  NO
  LPB
}

model Currency {
  id               String            @id @default(cuid())
  name             String
  symbol           String
  code             CurrencyCode      @unique
  imageUrl         String?
  transactionItems TransactionItem[]
  marketOptions    MarketOption[]    @relation()
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Transaction {
  id               String            @id @default(cuid())
  type             String
  description      String?
  marketId         String?
  market           Market?           @relation(fields: [marketId], references: [id])
  transactionItems TransactionItem[]
  creatorId        String
  creator          Account           @relation(fields: [creatorId], references: [id])
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now())

  // Unnecessary reverse relations
  notifications Notification[] @relation()
}

model TransactionItem {
  id            String       @id @default(cuid())
  accountId     String
  account       Account      @relation(fields: [accountId], references: [id])
  currencyCode  CurrencyCode
  currency      Currency     @relation(fields: [currencyCode], references: [code])
  transactionId String
  transaction   Transaction  @relation(fields: [transactionId], references: [id])
  amount        Decimal
  createdAt     DateTime     @default(now())
}

model Account {
  id               String            @id @default(cuid())
  internalType     String?           @unique
  userId           String?
  user             User?             @relation(fields: [userId], references: [id])
  marketId         String?
  market           Market?           @relation(fields: [marketId], references: [id])
  transactionItems TransactionItem[]
  transactions     Transaction[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now())
}

enum NotificationType {
  MARKET_RESOLVED
  MARKET_TRADE
  MARKET_LIQUIDITY_ADDED
  MARKET_COMMENT
  COMMENT_REPLY
  COMMENT_MENTION
  COMMENT_REACTION
}

model Notification {
  id                 String            @id @default(cuid())
  recipientId        String
  recipient          User              @relation("NotificationRecipient", fields: [recipientId], references: [id])
  actorId            String
  actor              User?             @relation("NotificationActor", fields: [actorId], references: [id])
  type               NotificationType
  content            Json
  marketId           String?
  market             Market?           @relation(fields: [marketId], references: [id])
  marketOptionId     String?
  marketOption       MarketOption?     @relation(fields: [marketOptionId], references: [id])
  marketResolutionId String?
  marketResolution   MarketResolution? @relation(fields: [marketResolutionId], references: [id])
  transactionId      String?
  transaction        Transaction?      @relation(fields: [transactionId], references: [id])
  commentId          String?
  comment            Comment?          @relation("NotificationComment", fields: [commentId], references: [id])
  parentCommentId    String?
  parentComment      Comment?          @relation("NotificationParentComment", fields: [parentCommentId], references: [id])
  commentReactionId  String?
  commentReaction    CommentReaction?  @relation(fields: [commentReactionId], references: [id])

  actionUrl String
  readAt    DateTime?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  groups    NotificationGroup[] @relation()

  @@index(fields: [recipientId, createdAt])
}

model NotificationGroup {
  id                 String           @id @default(cuid())
  recipientId        String
  recipient          User             @relation(fields: [recipientId], references: [id])
  type               NotificationType
  count              Int              @default(1)
  lastNotificationId String
  lastNotification   Notification     @relation(fields: [lastNotificationId], references: [id])
  groupWindowEnd     DateTime
  groupKey           String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@unique(fields: [recipientId, type, groupWindowEnd, groupKey])
  @@index(fields: [recipientId, type, groupWindowEnd, groupKey])
}
