generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

generator zod {
  provider          = "zod-prisma-types"
  relationModel     = "default"
  output            = "./zod"
  useMultipleFiles  = true
  createInputTypes  = false
  createOutputTypes = false
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id               String            @id @default(cuid())
  /// @zod.string.min(1, { message: "Email is required" }).email()
  email            String            @unique
  username         String            @unique
  displayName      String
  avatarUrl        String?
  twitterHandle    String?
  discordHandle    String?
  website          String?
  bio              String?
  emailVerified    DateTime?
  accounts         Account[]
  sessions         Session[]
  comments         Comment[]
  commentReactions CommentReaction[]
  markets          Market[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Market {
  id          String    @id @default(cuid())
  question    String /// @zod.string.min(1, { message: "Question is required" })
  description String
  slug        String /// @zod.string.min(1, { message: "Slug is required" })
  closeDate   DateTime?
  resolvedAt  DateTime?

  createdBy String
  user      User   @relation(fields: [createdBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum CommentEntityType {
  MARKET
}

model Comment {
  id         String            @id @default(cuid())
  content    String /// @zod.string.min(1).max(5000)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime?         @updatedAt
  edited     Boolean           @default(false)
  author     User              @relation(fields: [authorId], references: [id])
  authorId   String
  parentId   String?
  parent     Comment?          @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[]         @relation("CommentReplies")
  reactions  CommentReaction[]
  hidden     Boolean           @default(false)
  entityType CommentEntityType
  entityId   String
}

model CommentReaction {
  id        String  @id @default(cuid())
  emoji     String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
}

model Currency {
  id        String   @id @default(cuid())
  name      String
  symbol    String
  code      String   @unique
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
