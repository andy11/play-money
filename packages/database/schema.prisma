generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

generator zod {
  provider      = "zod-prisma"
  relationModel = "default"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  /// @zod.min(1, "Email is required").email()
  email         String    @unique
  username      String    @unique
  displayName   String
  avatarUrl     String?
  twitterHandle String?
  discordHandle String?
  website       String?
  bio           String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  markets       Market[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Market {
  id          String    @id @default(cuid())
  question    String /// @zod.min(1, "Question is required")
  description String
  slug        String    @unique /// @zod.min(1, "Slug is required")
  closeDate   DateTime?
  resolvedAt  DateTime?

  createdBy String
  user      User   @relation(fields: [createdBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
